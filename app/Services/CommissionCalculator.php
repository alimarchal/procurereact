<?php

namespace App\Services;

use App\Models\{Business, User, Commission, WalletTransaction};
use App\Enums\{CommissionType, CommissionStatus};
use App\Repositories\{CommissionRepository, WalletRepository};
use Illuminate\Support\Facades\{DB, Log};

readonly class CommissionCalculator
{
    // Define constants for business logic
    private const MINIMUM_COMMISSION = 0.01; // Smallest commission amount we'll process (1 paisa)
    private const COMMISSION_RATE = 0.10;    // 10% commission rate for both direct and indirect

    /**
     * Constructor with dependency injection
     * @param CommissionRepository $commissionRepository For handling commission records
     * @param WalletRepository $walletRepository For handling wallet transactions
     */
    public function __construct(
        private CommissionRepository $commissionRepository,
        private WalletRepository $walletRepository
    ) {}

    /**
     * Main entry point for processing commissions when a business is registered
     * Wraps all commission calculations in a transaction for data consistency
     * @param Business $business The newly registered business
     */
    public function processCommission(Business $business): void
    {
        DB::transaction(function () use ($business) {
            // Step 1: Process direct commission for the business registrant
            $directCommission = $this->processDirectCommission($business);

            // Step 2: If direct commission was created and user has a parent,
            // start the indirect commission chain
            if ($directCommission && $business->user->parent) {
                $this->processIndirectCommissions($business, $directCommission->amount);
            }
        });
    }

    /**
     * Processes direct commission for the user who registered the business
     * @param Business $business The registered business
     * @return Commission|null The created commission or null if amount too small
     */
    private function processDirectCommission(Business $business): ?Commission
    {
        // Validate business amount
        if ($business->amount <= 0) {
            Log::info('Business amount is zero or negative', ['business_id' => $business->id]);
            return null;
        }

        // Calculate direct commission amount (10% of business amount)
        $directAmount = $this->calculateDirectCommission($business->amount);

        // Check if commission is worth processing
        if ($directAmount < self::MINIMUM_COMMISSION) {
            Log::info('Direct commission too small', [
                'business_id' => $business->id,
                'amount' => $directAmount
            ]);
            return null;
        }

        // Create and return direct commission for the registering user
        return $this->createCommission(
            user: $business->user,        // Commission goes to business registrant
            business: $business,          // Reference to the business
            fromUser: $business->user,    // Commission generated by same user
            amount: $directAmount,        // 10% of business amount
            type: CommissionType::Direct, // Mark as direct commission
            level: 1                      // Level 1 is direct commission
        );
    }

    /**
     * Processes the chain of indirect commissions up the MLM tree
     * Continues until reaching top level or commission becomes too small
     * @param Business $business The original business
     * @param float $previousAmount The previous level's commission amount
     */
    private function processIndirectCommissions(Business $business, float $previousAmount): void
    {
        $currentUser = $business->user;              // Start with business registrant
        $previousCommissionAmount = $previousAmount; // Track previous level's commission
        $level = 1;                                 // Track MLM level (starts at 1)

        // Continue while there's a parent and commission is worth processing
        while ($currentUser->parent && $previousCommissionAmount >= self::MINIMUM_COMMISSION) {
            // Calculate indirect commission (10% of previous level's commission)
            $indirectAmount = $this->calculateIndirectCommission($previousCommissionAmount);

            // Only create commission if amount is significant
            if ($indirectAmount >= self::MINIMUM_COMMISSION) {
                $commission = $this->createCommission(
                    user: $currentUser->parent,     // Commission goes to parent
                    business: $business,            // Reference original business
                    fromUser: $business->user,      // Commission generated by business registrant
                    amount: $indirectAmount,        // 10% of previous commission
                    type: CommissionType::Indirect, // Mark as indirect commission
                    level: $level + 1              // Increment level for MLM depth
                );
            }

            // Move up to next level in MLM tree
            $currentUser = $currentUser->parent;
            $previousCommissionAmount = $indirectAmount;
            $level++;
        }
    }

    /**
     * Calculates direct commission amount
     * @param float $businessAmount Original business transaction amount
     * @return float Calculated commission amount
     */
    private function calculateDirectCommission(float $businessAmount): float
    {
        return $businessAmount * self::COMMISSION_RATE; // 10% of business amount
    }

    /**
     * Calculates indirect commission amount
     * @param float $previousCommissionAmount Previous level's commission amount
     * @return float Calculated commission amount
     */
    private function calculateIndirectCommission(float $previousCommissionAmount): float
    {
        return $previousCommissionAmount * self::COMMISSION_RATE; // 10% of previous commission
    }

    /**
     * Creates a commission record and associated wallet transaction
     * @param User $user Commission recipient
     * @param Business $business Related business
     * @param User $fromUser Commission generator
     * @param float $amount Commission amount
     * @param CommissionType $type Direct or Indirect
     * @param int $level MLM level
     * @return Commission|null Created commission or null if failed
     */
    private function createCommission(
        User $user,
        Business $business,
        User $fromUser,
        float $amount,
        CommissionType $type,
        int $level
    ): ?Commission {
        try {
            // Round to 2 decimal places for financial accuracy
            $amount = round($amount, 2);

            // Double-check minimum commission
            if ($amount < self::MINIMUM_COMMISSION) {
                return null;
            }

            // Create commission record
            $commission = $this->commissionRepository->create([
                'user_id' => $user->id,
                'business_id' => $business->id,
                'from_user_id' => $fromUser->id,
                'amount' => $amount,
                'type' => $type,
                'level' => $level,
                'status' => CommissionStatus::Pending
            ]);

            // Ensure user has a wallet
            if (!$user->wallet) {
                $user->wallet()->create();
            }

            // Create wallet transaction
            $this->walletRepository->creditCommission($user->wallet, $commission);

            return $commission;
        } catch (\Exception $e) {
            // Log any errors for debugging
            Log::error('Commission creation failed', [
                'user_id' => $user->id,
                'business_id' => $business->id,
                'amount' => $amount,
                'error' => $e->getMessage()
            ]);
            throw $e;
        }
    }
}
